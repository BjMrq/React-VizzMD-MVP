{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionsType from './actionsTypes';\nexport function enterPatient(patient) {\n  return {\n    type: actionsType.PATIENT_ENTERED,\n    payload: patient\n  };\n}\nexport function flipBody(face) {\n  return {\n    type: actionsType.FLIP_BODY,\n    payload: face\n  };\n}\nexport function selectMuscle(muscleName) {\n  return {\n    type: actionsType.MUSCLE_SELECTED,\n    payload: muscleName\n  };\n}\nexport function changeMuscleForce(force, muscleInfo, musclesState) {\n  var _muscleInfo$split = muscleInfo.split(\"-\"),\n      _muscleInfo$split2 = _slicedToArray(_muscleInfo$split, 2),\n      name = _muscleInfo$split2[0],\n      side = _muscleInfo$split2[1];\n\n  var newMuscles = musclesState.map(function (muscleObj) {\n    if (muscleObj.name === name) {\n      if (side === \"right\") {\n        return _objectSpread({}, muscleObj, {\n          forceRight: Number(force)\n        });\n      }\n\n      if (side === \"left\") {\n        return _objectSpread({}, muscleObj, {\n          forceLeft: Number(force)\n        });\n      }\n    }\n\n    return muscleObj;\n  });\n  return {\n    type: actionsType.MUSCLE_FORCE_CHANGED,\n    payload: newMuscles\n  };\n}\nexport function pageLoaded() {\n  return {\n    type: actionsType.PAGE_LOADED,\n    payload: false\n  };\n}","map":{"version":3,"sources":["/home/bjmrq/code/BjMrq/React-VizzMD-MVP/src/actions/index.js"],"names":["actionsType","enterPatient","patient","type","PATIENT_ENTERED","payload","flipBody","face","FLIP_BODY","selectMuscle","muscleName","MUSCLE_SELECTED","changeMuscleForce","force","muscleInfo","musclesState","split","name","side","newMuscles","map","muscleObj","forceRight","Number","forceLeft","MUSCLE_FORCE_CHANGED","pageLoaded","PAGE_LOADED"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;AAEA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI,eADb;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID;AAED,OAAO,SAASI,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,SAAO;AACLJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,SADb;AAELH,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID;AAED,OAAO,SAASE,YAAT,CAAsBC,UAAtB,EAAkC;AACvC,SAAO;AACLP,IAAAA,IAAI,EAAEH,WAAW,CAACW,eADb;AAELN,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID;AAED,OAAO,SAASE,iBAAT,CAA2BC,KAA3B,EAAkCC,UAAlC,EAA8CC,YAA9C,EAA4D;AAAA,0BAC5CD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAD4C;AAAA;AAAA,MAC1DC,IAD0D;AAAA,MACpDC,IADoD;;AAEjE,MAAMC,UAAU,GAAGJ,YAAY,CAACK,GAAb,CAAiB,UAACC,SAAD,EAAe;AACjD,QAAIA,SAAS,CAACJ,IAAV,KAAmBA,IAAvB,EAA6B;AAC3B,UAAIC,IAAI,KAAK,OAAb,EAAsB;AACpB,iCACKG,SADL;AAEEC,UAAAA,UAAU,EAAEC,MAAM,CAACV,KAAD;AAFpB;AAID;;AAAC,UAAIK,IAAI,KAAK,MAAb,EAAqB;AACrB,iCACKG,SADL;AAEEG,UAAAA,SAAS,EAAED,MAAM,CAACV,KAAD;AAFnB;AAID;AACF;;AACD,WAAOQ,SAAP;AACD,GAfkB,CAAnB;AAiBA,SAAO;AACLlB,IAAAA,IAAI,EAAEH,WAAW,CAACyB,oBADb;AAELpB,IAAAA,OAAO,EAAEc;AAFJ,GAAP;AAID;AAED,OAAO,SAASO,UAAT,GAAsB;AAC3B,SAAO;AACLvB,IAAAA,IAAI,EAAEH,WAAW,CAAC2B,WADb;AAELtB,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID","sourcesContent":["import * as actionsType from './actionsTypes';\n\nexport function enterPatient(patient) {\n  return {\n    type: actionsType.PATIENT_ENTERED,\n    payload: patient\n  };\n}\n\nexport function flipBody(face) {\n  return {\n    type: actionsType.FLIP_BODY,\n    payload: face\n  };\n}\n\nexport function selectMuscle(muscleName) {\n  return {\n    type: actionsType.MUSCLE_SELECTED,\n    payload: muscleName\n  };\n}\n\nexport function changeMuscleForce(force, muscleInfo, musclesState) {\n  const [name, side] = muscleInfo.split(\"-\");\n  const newMuscles = musclesState.map((muscleObj) => {\n    if (muscleObj.name === name) {\n      if (side === \"right\") {\n        return {\n          ...muscleObj,\n          forceRight: Number(force)\n        };\n      } if (side === \"left\") {\n        return {\n          ...muscleObj,\n          forceLeft: Number(force)\n        };\n      }\n    }\n    return muscleObj;\n  });\n\n  return {\n    type: actionsType.MUSCLE_FORCE_CHANGED,\n    payload: newMuscles\n  };\n}\n\nexport function pageLoaded() {\n  return {\n    type: actionsType.PAGE_LOADED,\n    payload: false\n  };\n}\n"]},"metadata":{},"sourceType":"module"}