{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionsType from './actionsTypes';\nexport function enterPatient(patient) {\n  return {\n    type: actionsType.PATIENT_ENTERED,\n    payload: patient\n  };\n}\nexport function flipBody(face) {\n  return {\n    type: actionsType.FLIP_BODY,\n    payload: face\n  };\n}\nexport function selectMuscle(muscleName) {\n  return {\n    type: actionsType.MUSCLE_SELECTED,\n    payload: muscleName\n  };\n}\nexport function changeMuscleForce(force, muscleInfo, musclesState) {\n  var _muscleInfo$split = muscleInfo.split(\"-\"),\n      _muscleInfo$split2 = _slicedToArray(_muscleInfo$split, 2),\n      name = _muscleInfo$split2[0],\n      side = _muscleInfo$split2[1];\n\n  var newMuscles = musclesState.map(function (muscleObj) {\n    if (muscleObj.name === name) {\n      if (side === \"right\") {\n        return _objectSpread({}, muscleObj, {\n          forceRight: Number(force)\n        });\n      }\n\n      if (side === \"left\") {\n        return _objectSpread({}, muscleObj, {\n          forceLeft: Number(force)\n        });\n      }\n    }\n\n    return muscleObj;\n  });\n  return {\n    type: actionsType.MUSCLE_FORCE_CHANGED,\n    payload: newMuscles\n  };\n}\nexport function pageLoaded() {\n  return {\n    type: actionsType.PAGE_LOADED,\n    payload: false\n  };\n}","map":null,"metadata":{},"sourceType":"module"}