{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Popup from \"reactjs-popup\";\nimport { selectMuscle, changeMuscleForce } from '../actions/index';\n\nclass MusclePopUp extends Component {\n  constructor(...args) {\n    var _temp;\n\n    return _temp = super(...args), this.closeModal = () => {\n      this.props.selectMuscle(null);\n    }, this.isMuscleSelected = () => {\n      if (this.props.selectedMuscle) {\n        return true;\n      }\n\n      return false;\n    }, this.handleForceOnMuscle = event => {\n      event.preventDefault();\n      this.props.changeMuscleForce(event.target.innerText, this.props.selectedMuscle, this.props.muscles);\n      this.props.selectMuscle(null);\n    }, _temp;\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.selectedMuscle !== this.props.selectedMuscle;\n  }\n\n  render() {\n    return __jsx(Popup, {\n      modal: true,\n      position: \"right center\",\n      open: this.isMuscleSelected(),\n      onClose: this.closeModal\n    }, __jsx(\"div\", {\n      className: \"scale-muscle-popup\"\n    }, __jsx(\"div\", {\n      className: \"gradient-square\"\n    }, __jsx(\"h5\", {\n      className: \"gradient-square-text\"\n    }, this.props.selectedMuscle)), __jsx(\"button\", {\n      onClick: this.handleForceOnMuscle,\n      className: \"zero-force\"\n    }, \"0\"), __jsx(\"button\", {\n      onClick: this.handleForceOnMuscle,\n      className: \"one-force\"\n    }, \"1\"), __jsx(\"button\", {\n      onClick: this.handleForceOnMuscle,\n      className: \"two-force\"\n    }, \"2\"), __jsx(\"button\", {\n      onClick: this.handleForceOnMuscle,\n      className: \"three-force\"\n    }, \"3\"), __jsx(\"button\", {\n      onClick: this.handleForceOnMuscle,\n      className: \"four-force\"\n    }, \"4\"), __jsx(\"button\", {\n      onClick: this.handleForceOnMuscle,\n      className: \"five-force\"\n    }, \"5\")));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedMuscle: state.selectedMuscle,\n    muscles: state.muscles\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    selectMuscle,\n    changeMuscleForce\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MusclePopUp);","map":null,"metadata":{},"sourceType":"module"}